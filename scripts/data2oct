#!/usr/bin/env python
# data2oct

"""
Convert data file (output of plbmd) to octave format

Input:  data file
Output: octave  file - default 'velocity.oct'
"""

##############################################################

def processCommandLineArgs():
    """
    returns a list containing the command line args
    1st element: input data file
    2nd element: output octave file
    """

    import optparse, sys
    
    usage = "usage: %prog [options]"
    parser = optparse.OptionParser(usage)
    parser.add_option("-f", dest="ifile",
                      help="input data file", metavar="FILE")
    parser.add_option("-v", dest="vfile", default="velocity.oct",
                      help="velocity output file (default: velocity.oct)",
                      metavar="FILE")
    parser.add_option("-d", dest="dfile", default="density.oct",
                      help="density output file (default: density.oct)",
                      metavar="FILE")
    parser.add_option("-y", type="int", dest="yvalue", default=10,
                      help="yval at which rho and v are printed (default: 10)")
    (opts, args) = parser.parse_args()

    # exit if no options are specified
    if (not bool(opts.ifile)) or (len(args)>0):
        print 'Incorrect options!! Check -h'
        sys.exit()

    # store the args in a buffer (list)
    commLineArgs = list()
    commLineArgs.append(opts.ifile)
    commLineArgs.append(opts.vfile)
    commLineArgs.append(opts.dfile)
    commLineArgs.append(opts.yvalue)

    # print command line options provided
    print ''
    print 'COMMAND LINE ARGS:'.rjust(30)
    print 'input data file:'.rjust(30), opts.ifile
    print 'output velocity file:'.rjust(30), opts.vfile
    print 'output density file:'.rjust(30), opts.dfile    
    print 'y-value:'.rjust(30),opts.yvalue
    print ''

    # return the buffer to the calling function
    return commLineArgs

##############################################################
    
def main():
    
    import sys, scipy

    # read the command line arguments
    tmp = processCommandLineArgs()
    ifile, vfile, dfile, yvalue = tmp[0:4]

    # open files
    # input
    try:
        ifname = open(ifile, 'r')
    except IOError:
        print 'ERROR: cannot open', ifile
        print ''
        sys.exit()
    # output
    vfname = open(vfile, 'w')
    dfname = open(dfile, 'w')
    
    # read input data file
    ifname.readline(); # 1st line is a comment
    lineSplit = (ifname.readline()).split() # line 2 gives domain dimensions
    Lx, Ly, Lz = [int(tmp) for tmp in lineSplit[0:3]]
    nNodes = Lx*Ly*Lz
    ifname.readline(); # 3rd line is a comment
    nodes = scipy.zeros((nNodes,8),float)
    for i in range(nNodes):
        lineSplit = (ifname.readline()).split()
        for j in range(7):
            nodes[i,j+1] = float(lineSplit[j])
        x = int(nodes[i,1])
        y = int(nodes[i,2])
        z = int(nodes[i,3])
        # 0th elt is the index
        nodes[i,0] = (x-1) + Lx*((y-1)+Ly*(z-1))

    # sort 'nodes' by index (0th col of each row)
    I = scipy.argsort(nodes[:,0])
    nodes = nodes[I,:]

    # writing velocity and density to file
    # ux to vel file, rho to density file
    print 'total nodes:'.rjust(30), nNodes
    for z in range(Lz):
        for y in range(Ly):
            for x in range(Lx):
                if y==yvalue:
                    index = x + Lx*(y+Ly*z)
                    vfname.write('%f ' % nodes[index,5])
                    dfname.write('%f ' % nodes[index,4])
        vfname.write('%s' % "\n");
        dfname.write('%s' % "\n");
        
    # uy to vel file
    vfname.write('%s' % "\n");
    for z in range(Lz):
        for y in range(Ly):
            for x in range(Lx):
                if y==yvalue:
                    index = x + Lx*(y+Ly*z)
                    vfname.write('%f ' % nodes[index,6])
        vfname.write('%s' % "\n");

    # uz to vel file
    vfname.write('%s' % "\n");
    for z in range(Lz):
        for y in range(Ly):
            for x in range(Lx):
                if y==yvalue:
                    index = x + Lx*(y+Ly*z)
                    vfname.write('%f ' % nodes[index,7])
        vfname.write('%s' % "\n");

##############################################################

if __name__=="__main__":
    main()

##############################################################

